{"ast":null,"code":"const savedCartState = JSON.parse(localStorage.getItem('cartState'));\nconst initialState = savedCartState || {\n  cartItems: [],\n  cartCounter: 0,\n  totalPrice: 0,\n  taxes: 0,\n  deliverCharges: 50,\n  grandTotal: 0\n};\n\n// Function to calculate total price, taxes, and grand total\nconst calculateTotals = (cartItems, deliverCharges) => {\n  const totalPrice = cartItems.reduce((acc, item) => acc + item.total_item_price, 0);\n  const taxes = totalPrice * 0.18;\n  const grandTotal = totalPrice + taxes + deliverCharges;\n  return {\n    totalPrice,\n    taxes,\n    grandTotal\n  };\n};\nconst cartReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      {\n        const productId = action.payload._id || action.payload.id;\n        const existIndex = state.cartItems.findIndex(item => item.id === productId);\n        let updatedState;\n        if (existIndex !== -1) {\n          // If item already exists in cart, update its qty and price\n          const updatedCartItems = state.cartItems.map((item, index) => {\n            if (index === existIndex) {\n              const newQty = item.qty + 1;\n              return {\n                ...item,\n                qty: newQty,\n                total_item_price: newQty * item.price\n              };\n            }\n            return item;\n          });\n          updatedState = {\n            ...state,\n            cartItems: updatedCartItems,\n            cartCounter: state.cartCounter + 1\n          };\n        } else {\n          // If item doesn't exist, add it to the cart\n          updatedState = {\n            ...state,\n            cartItems: [...state.cartItems, {\n              ...action.payload,\n              id: productId,\n              // Ensures consistent product tracking\n              qty: 1,\n              total_item_price: action.payload.price\n            }],\n            cartCounter: state.cartCounter + 1\n          };\n        }\n        const {\n          totalPrice,\n          taxes,\n          grandTotal\n        } = calculateTotals(updatedState.cartItems, state.deliverCharges);\n        updatedState = {\n          ...updatedState,\n          totalPrice,\n          taxes,\n          grandTotal\n        };\n        localStorage.setItem('cartState', JSON.stringify(updatedState));\n        return updatedState;\n      }\n    case 'INCREMENT_CART_COUNTER':\n      {\n        const updatedCartItems = state.cartItems.map(item => {\n          if (item.id === action.payload) {\n            const newQty = item.qty + 1; // Change quantity to qty\n            return {\n              ...item,\n              qty: newQty,\n              // Change quantity to qty\n              total_item_price: newQty * item.price\n            };\n          }\n          return item;\n        });\n        const {\n          totalPrice,\n          taxes,\n          grandTotal\n        } = calculateTotals(updatedCartItems, state.deliverCharges);\n        const updatedState = {\n          ...state,\n          cartItems: updatedCartItems,\n          totalPrice,\n          taxes,\n          grandTotal\n        };\n        localStorage.setItem('cartState', JSON.stringify(updatedState));\n        return updatedState;\n      }\n    case 'DECREMENT_CART_COUNTER':\n      {\n        const updatedCartItems = state.cartItems.map(item => {\n          if (item.id === action.payload && item.qty > 1) {\n            const newQty = item.qty - 1;\n            return {\n              ...item,\n              qty: newQty,\n              total_item_price: newQty * item.price\n            };\n          }\n          return item;\n        });\n        const {\n          totalPrice,\n          taxes,\n          grandTotal\n        } = calculateTotals(updatedCartItems, state.deliverCharges);\n        const updatedState = {\n          ...state,\n          cartItems: updatedCartItems,\n          totalPrice,\n          taxes,\n          grandTotal\n        };\n        localStorage.setItem('cartState', JSON.stringify(updatedState));\n        return updatedState;\n      }\n    case 'LOAD_CART_FROM_DB':\n      {\n        const cartItems = action.payload;\n        const {\n          totalPrice,\n          taxes,\n          grandTotal\n        } = calculateTotals(cartItems, state.deliverCharges);\n        const cartCounter = cartItems.reduce((acc, item) => acc + item.qty, 0);\n        const updatedState = {\n          ...state,\n          cartItems,\n          cartCounter,\n          totalPrice,\n          taxes,\n          grandTotal\n        };\n        localStorage.setItem('cartState', JSON.stringify(updatedState));\n        return updatedState;\n      }\n    case 'CLEAR_CART':\n      {\n        // Clear localStorage when cart is cleared\n        localStorage.removeItem('cartState');\n        return {\n          ...state,\n          cartItems: [],\n          cartCounter: 0,\n          totalPrice: 0,\n          taxes: 0,\n          deliverCharges: 0,\n          grandTotal: 0\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport default cartReducer;","map":{"version":3,"names":["savedCartState","JSON","parse","localStorage","getItem","initialState","cartItems","cartCounter","totalPrice","taxes","deliverCharges","grandTotal","calculateTotals","reduce","acc","item","total_item_price","cartReducer","state","action","type","productId","payload","_id","id","existIndex","findIndex","updatedState","updatedCartItems","map","index","newQty","qty","price","setItem","stringify","removeItem"],"sources":["D:/Sachin/Project/E-Commerce Project/frontend/src/reducers/cartReducer.js"],"sourcesContent":["const savedCartState = JSON.parse(localStorage.getItem('cartState'));\r\n\r\nconst initialState = savedCartState || {\r\n  cartItems: [],\r\n  cartCounter: 0,\r\n  totalPrice: 0,\r\n  taxes: 0,\r\n  deliverCharges: 50,\r\n  grandTotal: 0,\r\n};\r\n\r\n// Function to calculate total price, taxes, and grand total\r\nconst calculateTotals = (cartItems, deliverCharges) => {\r\n  const totalPrice = cartItems.reduce((acc, item) => acc + item.total_item_price, 0);\r\n  const taxes = totalPrice * 0.18;\r\n  const grandTotal = totalPrice + taxes + deliverCharges;\r\n\r\n  return { totalPrice, taxes, grandTotal };\r\n};\r\n\r\nconst cartReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case 'ADD_TO_CART': {\r\n      const productId = action.payload._id || action.payload.id;\r\n      const existIndex = state.cartItems.findIndex(item => item.id === productId);\r\n\r\n      let updatedState;\r\n\r\n      if (existIndex !== -1) {\r\n        // If item already exists in cart, update its qty and price\r\n        const updatedCartItems = state.cartItems.map((item, index) => {\r\n          if (index === existIndex) {\r\n            const newQty = item.qty + 1;\r\n            return {\r\n              ...item,\r\n              qty: newQty,\r\n              total_item_price: newQty * item.price,\r\n            };\r\n          }\r\n          return item;\r\n        });\r\n\r\n        updatedState = {\r\n          ...state,\r\n          cartItems: updatedCartItems,\r\n          cartCounter: state.cartCounter + 1,\r\n        };\r\n      } else {\r\n        // If item doesn't exist, add it to the cart\r\n        updatedState = {\r\n          ...state,\r\n          cartItems: [\r\n            ...state.cartItems,\r\n            {\r\n              ...action.payload,\r\n              id: productId, // Ensures consistent product tracking\r\n              qty: 1,\r\n              total_item_price: action.payload.price,\r\n            },\r\n          ],\r\n          cartCounter: state.cartCounter + 1,\r\n        };\r\n      }\r\n\r\n      const { totalPrice, taxes, grandTotal } = calculateTotals(updatedState.cartItems, state.deliverCharges);\r\n\r\n      updatedState = {\r\n        ...updatedState,\r\n        totalPrice,\r\n        taxes,\r\n        grandTotal,\r\n      };\r\n\r\n      localStorage.setItem('cartState', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    }\r\n\r\n\r\n    case 'INCREMENT_CART_COUNTER': {\r\n      const updatedCartItems = state.cartItems.map(item => {\r\n        if (item.id === action.payload) {\r\n          const newQty = item.qty + 1; // Change quantity to qty\r\n          return {\r\n            ...item,\r\n            qty: newQty, // Change quantity to qty\r\n            total_item_price: newQty * item.price,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n\r\n      const { totalPrice, taxes, grandTotal } = calculateTotals(updatedCartItems, state.deliverCharges);\r\n\r\n      const updatedState = {\r\n        ...state,\r\n        cartItems: updatedCartItems,\r\n        totalPrice,\r\n        taxes,\r\n        grandTotal,\r\n      };\r\n\r\n      localStorage.setItem('cartState', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    }\r\n\r\n    case 'DECREMENT_CART_COUNTER': {\r\n      const updatedCartItems = state.cartItems.map(item => {\r\n        if (item.id === action.payload && item.qty > 1) {\r\n          const newQty = item.qty - 1;\r\n          return {\r\n            ...item,\r\n            qty: newQty,\r\n            total_item_price: newQty * item.price,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n\r\n      const { totalPrice, taxes, grandTotal } = calculateTotals(updatedCartItems, state.deliverCharges);\r\n\r\n      const updatedState = {\r\n        ...state,\r\n        cartItems: updatedCartItems,\r\n        totalPrice,\r\n        taxes,\r\n        grandTotal,\r\n      };\r\n\r\n      localStorage.setItem('cartState', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    }\r\n\r\n    case 'LOAD_CART_FROM_DB': {\r\n      const cartItems = action.payload;\r\n      const { totalPrice, taxes, grandTotal } = calculateTotals(cartItems, state.deliverCharges);\r\n      const cartCounter = cartItems.reduce((acc, item) => acc + item.qty, 0);\r\n\r\n      const updatedState = {\r\n        ...state,\r\n        cartItems,\r\n        cartCounter,\r\n        totalPrice,\r\n        taxes,\r\n        grandTotal,\r\n      };\r\n\r\n      localStorage.setItem('cartState', JSON.stringify(updatedState));\r\n      return updatedState;\r\n    }\r\n\r\n\r\n\r\n    case 'CLEAR_CART': {\r\n      // Clear localStorage when cart is cleared\r\n      localStorage.removeItem('cartState');\r\n      return {\r\n        ...state,\r\n        cartItems: [],\r\n        cartCounter: 0,\r\n        totalPrice: 0,\r\n        taxes: 0,\r\n        deliverCharges: 0,\r\n        grandTotal: 0,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cartReducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}