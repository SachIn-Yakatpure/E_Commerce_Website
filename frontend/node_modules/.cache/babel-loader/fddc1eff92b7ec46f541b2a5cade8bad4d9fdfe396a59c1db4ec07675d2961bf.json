{"ast":null,"code":"import axios from \"axios\";\nimport { loadUserCart } from \"./cartActions\";\nimport { saveUserCart } from \"./cartActions\";\nexport const loginUser = formData => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(\"http://localhost:7000/login\", formData, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: \"USER_LOGIN_SUCCESS\",\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    console.log(\"‚úÖ userInfo saved to localStorage:\", data);\n\n    // Immediately load cart using this userInfo\n    dispatch(loadUserCart(data));\n    return {\n      success: true\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Login error:\", error);\n    return {\n      success: false,\n      message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errors) || \"Login failed\"\n    };\n  }\n};\nexport const logout = () => async (dispatch, getState) => {\n  const {\n    cart: {\n      cartItems\n    },\n    userLogin: {\n      userInfo\n    }\n  } = getState();\n\n  // üß† 1. Save cart to DB (if needed)\n  if (userInfo !== null && userInfo !== void 0 && userInfo.token) {\n    await dispatch(saveUserCart());\n\n    // üßπ 2. Clear backend cart\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    try {\n      await axios.post('/api/cart/clear', {}, config);\n      console.log(\"‚úÖ Cart cleared in backend on logout\");\n    } catch (error) {\n      console.error(\"‚ùå Error clearing backend cart on logout:\", error.message);\n    }\n  }\n\n  // üîö 3. Now clear Redux + localStorage\n  dispatch({\n    type: 'USER_LOGOUT'\n  });\n  dispatch({\n    type: 'CLEAR_CART'\n  });\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartState');\n};","map":{"version":3,"names":["axios","loadUserCart","saveUserCart","loginUser","formData","dispatch","data","post","headers","type","payload","localStorage","setItem","JSON","stringify","console","log","success","error","_error$response","_error$response$data","message","response","errors","logout","getState","cart","cartItems","userLogin","userInfo","token","config","Authorization","removeItem"],"sources":["D:/Sachin/Project/E-Commerce Project/frontend/src/actions/userActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { loadUserCart } from \"./cartActions\"; \r\nimport { saveUserCart } from \"./cartActions\";\r\n\r\n\r\nexport const loginUser = (formData) => async (dispatch) => {\r\n  try {\r\n    const { data } = await axios.post(\"http://localhost:7000/login\", formData, {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    dispatch({ type: \"USER_LOGIN_SUCCESS\", payload: data });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n    console.log(\"‚úÖ userInfo saved to localStorage:\", data);\r\n\r\n    // Immediately load cart using this userInfo\r\n    dispatch(loadUserCart(data));\r\n\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    return { success: false, message: error.response?.data?.errors || \"Login failed\" };\r\n  }\r\n};\r\n\r\nexport const logout = () => async (dispatch, getState) => {\r\n  const {\r\n    cart: { cartItems },\r\n    userLogin: { userInfo },\r\n  } = getState();\r\n\r\n  // üß† 1. Save cart to DB (if needed)\r\n  if (userInfo?.token) {\r\n    await dispatch(saveUserCart());\r\n\r\n    // üßπ 2. Clear backend cart\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await axios.post('/api/cart/clear', {}, config);\r\n      console.log(\"‚úÖ Cart cleared in backend on logout\");\r\n    } catch (error) {\r\n      console.error(\"‚ùå Error clearing backend cart on logout:\", error.message);\r\n    }\r\n  }\r\n\r\n  // üîö 3. Now clear Redux + localStorage\r\n  dispatch({ type: 'USER_LOGOUT' });\r\n  dispatch({ type: 'CLEAR_CART' });\r\n\r\n  localStorage.removeItem('userInfo');\r\n  localStorage.removeItem('cartState');\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,YAAY,QAAQ,eAAe;AAG5C,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACzD,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,6BAA6B,EAAEH,QAAQ,EAAE;MACzEI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEFH,QAAQ,CAAC;MAAEI,IAAI,EAAE,oBAAoB;MAAEC,OAAO,EAAEJ;IAAK,CAAC,CAAC;IAEvDK,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;IACtDS,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEV,IAAI,CAAC;;IAEtD;IACAD,QAAQ,CAACJ,YAAY,CAACK,IAAI,CAAC,CAAC;IAE5B,OAAO;MAAEW,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdL,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO;MAAED,OAAO,EAAE,KAAK;MAAEI,OAAO,EAAE,EAAAF,eAAA,GAAAD,KAAK,CAACI,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBb,IAAI,cAAAc,oBAAA,uBAApBA,oBAAA,CAAsBG,MAAM,KAAI;IAAe,CAAC;EACpF;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM,OAAOnB,QAAQ,EAAEoB,QAAQ,KAAK;EACxD,MAAM;IACJC,IAAI,EAAE;MAAEC;IAAU,CAAC;IACnBC,SAAS,EAAE;MAAEC;IAAS;EACxB,CAAC,GAAGJ,QAAQ,CAAC,CAAC;;EAEd;EACA,IAAII,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,KAAK,EAAE;IACnB,MAAMzB,QAAQ,CAACH,YAAY,CAAC,CAAC,CAAC;;IAE9B;IACA,MAAM6B,MAAM,GAAG;MACbvB,OAAO,EAAE;QACPwB,aAAa,EAAE,UAAUH,QAAQ,CAACC,KAAK;MACzC;IACF,CAAC;IAED,IAAI;MACF,MAAM9B,KAAK,CAACO,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAEwB,MAAM,CAAC;MAC/ChB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IACpD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAACG,OAAO,CAAC;IAC1E;EACF;;EAEA;EACAhB,QAAQ,CAAC;IAAEI,IAAI,EAAE;EAAc,CAAC,CAAC;EACjCJ,QAAQ,CAAC;IAAEI,IAAI,EAAE;EAAa,CAAC,CAAC;EAEhCE,YAAY,CAACsB,UAAU,CAAC,UAAU,CAAC;EACnCtB,YAAY,CAACsB,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}